<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="structExample.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<comment type="line">// Define a struct for a point in 2D space</comment>
<struct>struct <name>Point</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="line">// Define a struct for a student record</comment>
<struct>struct <name>Student</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>gpa</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
    <comment type="line">// Create instances of the struct and initialize values</comment>
    <decl_stmt><decl><type><name>Point</name></type> <name>p1</name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Student</name></type> <name>s1</name> <init>= <expr><block>{<expr><literal type="number">1001</literal></expr>, <expr><literal type="string">"John Doe"</literal></expr>, <expr><literal type="number">3.5</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Student</name></type> <name>s2</name> <init>= <expr><block>{<expr><literal type="number">1003</literal></expr>, <expr><literal type="string">"Hugert"</literal></expr>, <expr><literal type="number">3.5</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>s1</name><operator>=</operator><block>{<expr><literal type="number">1002</literal></expr>, <expr><literal type="string">"Sanjay Rajesh"</literal></expr>, <expr><literal type="number">4.5</literal></expr>}</block></expr>;</expr_stmt>
    <comment type="line">// Access and print values of the struct members</comment>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Point p1: ("</literal> <operator>&lt;&lt;</operator> <name><name>p1</name><operator>.</operator><name>x</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p1</name><operator>.</operator><name>y</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Student s1: ID="</literal> <operator>&lt;&lt;</operator> <name><name>s1</name><operator>.</operator><name>id</name></name> <operator>&lt;&lt;</operator> <literal type="string">", Name="</literal> <operator>&lt;&lt;</operator> <name><name>s1</name><operator>.</operator><name>name</name></name> <operator>&lt;&lt;</operator> <literal type="string">", GPA="</literal> <operator>&lt;&lt;</operator> <name><name>s1</name><operator>.</operator><name>gpa</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Student s2: ID="</literal> <operator>&lt;&lt;</operator> <name><name>s2</name><operator>.</operator><name>id</name></name> <operator>&lt;&lt;</operator> <literal type="string">", Name="</literal> <operator>&lt;&lt;</operator> <name><name>s2</name><operator>.</operator><name>name</name></name> <operator>&lt;&lt;</operator> <literal type="string">", GPA="</literal> <operator>&lt;&lt;</operator> <name><name>s2</name><operator>.</operator><name>gpa</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
